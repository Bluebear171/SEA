addr 0x80482d4 @asm "push   %ebx"
label pc_0x80482d4
T_t:u32 = R_EBX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t:u32
addr 0x80482d5 @asm "sub    $0x8,%esp"
label pc_0x80482d5
T_t_79:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 8:u32
R_CF:bool = T_t_79:u32 < 8:u32
R_OF:bool = high:bool((T_t_79:u32 ^ 8:u32) & (T_t_79:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_79:u32 ^ 8:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x80482d8 @asm "call   0x00000000080482dd"
label pc_0x80482d8
T_target:u32 = 0x80482dd:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80482dd:u32
jmp 0x80482dd:u32 @str "call"
addr 0x80482dd @asm "pop    %ebx"
label pc_0x80482dd
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80482de @asm "add    $0x1d17,%ebx"
label pc_0x80482de
T_t1:u32 = R_EBX:u32
T_t2:u32 = 0x1d17:u32
R_EBX:u32 = R_EBX:u32 + T_t2:u32
R_CF:bool = R_EBX:u32 < T_t1:u32
R_OF:bool = high:bool((T_t1:u32 ^ ~T_t2:u32) & (T_t1:u32 ^ R_EBX:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_EBX:u32 ^ T_t1:u32 ^ T_t2:u32))
R_PF:bool =
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_SF:bool = high:bool(R_EBX:u32)
R_ZF:bool = 0:u32 == R_EBX:u32
addr 0x80482e4 @asm "mov    -0x4(%ebx),%eax"
label pc_0x80482e4
R_EAX:u32 = mem:?u32[R_EBX:u32 + -4:u32, e_little]:u32
addr 0x80482ea @asm "test   %eax,%eax"
label pc_0x80482ea
T_t_83:u32 = R_EAX:u32 & R_EAX:u32
R_OF:bool = false
R_CF:bool = false
R_AF:bool = unknown "AF is undefined after and":bool
R_PF:bool =
  ~low:bool(T_t_83:u32 >> 7:u32 ^ T_t_83:u32 >> 6:u32 ^ T_t_83:u32 >> 5:u32 ^
            T_t_83:u32 >> 4:u32 ^ T_t_83:u32 >> 3:u32 ^ T_t_83:u32 >> 2:u32 ^
            T_t_83:u32 >> 1:u32 ^ T_t_83:u32)
R_SF:bool = high:bool(T_t_83:u32)
R_ZF:bool = 0:u32 == T_t_83:u32
addr 0x80482ec @asm "je     0x00000000080482f3"
label pc_0x80482ec
cjmp R_ZF:bool, 0x80482f3:u32, "nocjmp0"
label nocjmp0
addr 0x80482ee @asm "call   0x0000000008048340"
label pc_0x80482ee
T_target_84:u32 = 0x8048340:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80482f3:u32
jmp 0x8048340:u32 @str "call"
addr 0x80482f3 @asm "call   0x00000000080483f0"
label pc_0x80482f3
T_target_85:u32 = 0x80483f0:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80482f8:u32
jmp 0x80483f0:u32 @str "call"
addr 0x80482f8 @asm "call   0x0000000008048510"
label pc_0x80482f8
T_target_86:u32 = 0x8048510:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80482fd:u32
jmp 0x8048510:u32 @str "call"
addr 0x80482fd @asm "add    $0x8,%esp"
label pc_0x80482fd
T_t1_87:u32 = R_ESP:u32
T_t2_88:u32 = 8:u32
R_ESP:u32 = R_ESP:u32 + T_t2_88:u32
R_CF:bool = R_ESP:u32 < T_t1_87:u32
R_OF:bool =
  high:bool((T_t1_87:u32 ^ ~T_t2_88:u32) & (T_t1_87:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t1_87:u32 ^ T_t2_88:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048300 @asm "pop    %ebx"
label pc_0x8048300
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048301 @asm "ret    "
label pc_0x8048301
T_ra:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra:u32 @str "ret"
addr 0x8048310 @asm "pushl  0x8049ff8"
label pc_0x8048310
T_t_90:u32 = mem:?u32[0x8049ff8:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_90:u32
addr 0x8048316 @asm "jmp    *0x8049ffc"
label pc_0x8048316
jmp mem:?u32[0x8049ffc:u32, e_little]:u32
addr 0x804831c @asm "add    %al,(%eax)"
label pc_0x804831c
T_t1_91:u8 = mem:?u32[R_EAX:u32, e_little]:u8
T_t2_92:u8 = low:u8(R_EAX:u32)
mem:?u32 =
  mem:?u32 with [R_EAX:u32, e_little]:u8 =
  mem:?u32[R_EAX:u32, e_little]:u8 + T_t2_92:u8
R_CF:bool = mem:?u32[R_EAX:u32, e_little]:u8 < T_t1_91:u8
R_OF:bool =
  high:bool((T_t1_91:u8 ^ ~T_t2_92:u8) &
            (T_t1_91:u8 ^ mem:?u32[R_EAX:u32, e_little]:u8))
R_AF:bool =
  0x10:u8 ==
  (0x10:u8 & (mem:?u32[R_EAX:u32, e_little]:u8 ^ T_t1_91:u8 ^ T_t2_92:u8))
R_PF:bool =
  ~low:bool(mem:?u32[R_EAX:u32, e_little]:u8 >> 7:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 6:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 5:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 4:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 3:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 2:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 1:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8)
R_SF:bool = high:bool(mem:?u32[R_EAX:u32, e_little]:u8)
R_ZF:bool = 0:u8 == mem:?u32[R_EAX:u32, e_little]:u8
addr 0x804831e @asm "add    %al,(%eax)"
label pc_0x804831e
T_t1_93:u8 = mem:?u32[R_EAX:u32, e_little]:u8
T_t2_94:u8 = low:u8(R_EAX:u32)
mem:?u32 =
  mem:?u32 with [R_EAX:u32, e_little]:u8 =
  mem:?u32[R_EAX:u32, e_little]:u8 + T_t2_94:u8
R_CF:bool = mem:?u32[R_EAX:u32, e_little]:u8 < T_t1_93:u8
R_OF:bool =
  high:bool((T_t1_93:u8 ^ ~T_t2_94:u8) &
            (T_t1_93:u8 ^ mem:?u32[R_EAX:u32, e_little]:u8))
R_AF:bool =
  0x10:u8 ==
  (0x10:u8 & (mem:?u32[R_EAX:u32, e_little]:u8 ^ T_t1_93:u8 ^ T_t2_94:u8))
R_PF:bool =
  ~low:bool(mem:?u32[R_EAX:u32, e_little]:u8 >> 7:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 6:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 5:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 4:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 3:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 2:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8 >> 1:u8 ^
            mem:?u32[R_EAX:u32, e_little]:u8)
R_SF:bool = high:bool(mem:?u32[R_EAX:u32, e_little]:u8)
R_ZF:bool = 0:u8 == mem:?u32[R_EAX:u32, e_little]:u8
addr 0x8048320 @asm "jmp    *0x804a000"
label pc_0x8048320
jmp mem:?u32[0x804a000:u32, e_little]:u32
addr 0x8048326 @asm "push   $0x0"
label pc_0x8048326
T_t_95:u32 = 0:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_95:u32
addr 0x804832b @asm "jmp    0x0000000008048310"
label pc_0x804832b
jmp 0x8048310:u32
addr 0x8048330 @asm "jmp    *0x804a004"
label pc_0x8048330
jmp mem:?u32[0x804a004:u32, e_little]:u32
addr 0x8048336 @asm "push   $0x8"
label pc_0x8048336
T_t_96:u32 = 8:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_96:u32
addr 0x804833b @asm "jmp    0x0000000008048310"
label pc_0x804833b
jmp 0x8048310:u32
addr 0x8048340 @asm "jmp    *0x804a008"
label pc_0x8048340
jmp mem:?u32[0x804a008:u32, e_little]:u32
addr 0x8048346 @asm "push   $0x10"
label pc_0x8048346
T_t_97:u32 = 0x10:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_97:u32
addr 0x804834b @asm "jmp    0x0000000008048310"
label pc_0x804834b
jmp 0x8048310:u32
addr 0x8048350 @asm "jmp    *0x804a00c"
label pc_0x8048350
jmp mem:?u32[0x804a00c:u32, e_little]:u32
addr 0x8048356 @asm "push   $0x18"
label pc_0x8048356
T_t_98:u32 = 0x18:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_98:u32
addr 0x804835b @asm "jmp    0x0000000008048310"
label pc_0x804835b
jmp 0x8048310:u32
addr 0x8048360 @asm "xor    %ebp,%ebp"
label pc_0x8048360
R_EBP:u32 = 0:u32
R_AF:bool = unknown "AF is undefined after xor":bool
R_ZF:bool = true
R_PF:bool = true
R_OF:bool = false
R_CF:bool = false
R_SF:bool = false
addr 0x8048362 @asm "pop    %esi"
label pc_0x8048362
R_ESI:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048363 @asm "mov    %esp,%ecx"
label pc_0x8048363
R_ECX:u32 = R_ESP:u32
addr 0x8048365 @asm "and    $0xfffffff0,%esp"
label pc_0x8048365
R_ESP:u32 = R_ESP:u32 & 0xfffffff0:u32
R_OF:bool = false
R_CF:bool = false
R_AF:bool = unknown "AF is undefined after and":bool
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048368 @asm "push   %eax"
label pc_0x8048368
T_t_99:u32 = R_EAX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_99:u32
addr 0x8048369 @asm "push   %esp"
label pc_0x8048369
T_t_100:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_100:u32
addr 0x804836a @asm "push   %edx"
label pc_0x804836a
T_t_101:u32 = R_EDX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_101:u32
addr 0x804836b @asm "push   $0x8048500"
label pc_0x804836b
T_t_102:u32 = 0x8048500:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_102:u32
addr 0x8048370 @asm "push   $0x8048490"
label pc_0x8048370
T_t_103:u32 = 0x8048490:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_103:u32
addr 0x8048375 @asm "push   %ecx"
label pc_0x8048375
T_t_104:u32 = R_ECX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_104:u32
addr 0x8048376 @asm "push   %esi"
label pc_0x8048376
T_t_105:u32 = R_ESI:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_105:u32
addr 0x8048377 @asm "push   $0x8048414"
label pc_0x8048377
T_t_106:u32 = 0x8048414:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_106:u32
addr 0x804837c @asm "call   0x0000000008048350"
label pc_0x804837c
T_target_107:u32 = 0x8048350:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048381:u32
jmp 0x8048350:u32 @str "call"
addr 0x8048381 @asm "hlt    "
label pc_0x8048381
halt R_EAX:u32
addr 0x8048382 @asm "nop"
label pc_0x8048382
addr 0x8048383 @asm "nop"
label pc_0x8048383
addr 0x8048384 @asm "nop"
label pc_0x8048384
addr 0x8048385 @asm "nop"
label pc_0x8048385
addr 0x8048386 @asm "nop"
label pc_0x8048386
addr 0x8048387 @asm "nop"
label pc_0x8048387
addr 0x8048388 @asm "nop"
label pc_0x8048388
addr 0x8048389 @asm "nop"
label pc_0x8048389
addr 0x804838a @asm "nop"
label pc_0x804838a
addr 0x804838b @asm "nop"
label pc_0x804838b
addr 0x804838c @asm "nop"
label pc_0x804838c
addr 0x804838d @asm "nop"
label pc_0x804838d
addr 0x804838e @asm "nop"
label pc_0x804838e
addr 0x804838f @asm "nop"
label pc_0x804838f
addr 0x8048390 @asm "push   %ebp"
label pc_0x8048390
T_t_108:u32 = R_EBP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_108:u32
addr 0x8048391 @asm "mov    %esp,%ebp"
label pc_0x8048391
R_EBP:u32 = R_ESP:u32
addr 0x8048393 @asm "push   %ebx"
label pc_0x8048393
T_t_109:u32 = R_EBX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_109:u32
addr 0x8048394 @asm "sub    $0x4,%esp"
label pc_0x8048394
T_t_110:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
R_CF:bool = T_t_110:u32 < 4:u32
R_OF:bool = high:bool((T_t_110:u32 ^ 4:u32) & (T_t_110:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_110:u32 ^ 4:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048397 @asm "cmpb   $0x0,0x804a018"
label pc_0x8048397
T_t_111:u8 = mem:?u32[0x804a018:u32, e_little]:u8 - 0:u8
R_CF:bool = mem:?u32[0x804a018:u32, e_little]:u8 < 0:u8
R_OF:bool =
  high:bool((mem:?u32[0x804a018:u32, e_little]:u8 ^ 0:u8) &
            (mem:?u32[0x804a018:u32, e_little]:u8 ^ T_t_111:u8))
R_AF:bool =
  0x10:u8 ==
  (0x10:u8 & (T_t_111:u8 ^ mem:?u32[0x804a018:u32, e_little]:u8 ^ 0:u8))
R_PF:bool =
  ~low:bool(T_t_111:u8 >> 7:u8 ^ T_t_111:u8 >> 6:u8 ^ T_t_111:u8 >> 5:u8 ^
            T_t_111:u8 >> 4:u8 ^ T_t_111:u8 >> 3:u8 ^ T_t_111:u8 >> 2:u8 ^
            T_t_111:u8 >> 1:u8 ^ T_t_111:u8)
R_SF:bool = high:bool(T_t_111:u8)
R_ZF:bool = 0:u8 == T_t_111:u8
addr 0x804839e @asm "jne    0x00000000080483df"
label pc_0x804839e
cjmp ~R_ZF:bool, 0x80483df:u32, "nocjmp1"
label nocjmp1
addr 0x80483a0 @asm "mov    0x804a01c,%eax"
label pc_0x80483a0
R_EAX:u32 = mem:?u32[0x804a01c:u32, e_little]:u32
addr 0x80483a5 @asm "mov    $0x8049f20,%ebx"
label pc_0x80483a5
R_EBX:u32 = 0x8049f20:u32
addr 0x80483aa @asm "sub    $0x8049f1c,%ebx"
label pc_0x80483aa
T_t_112:u32 = R_EBX:u32
R_EBX:u32 = R_EBX:u32 - 0x8049f1c:u32
R_CF:bool = T_t_112:u32 < 0x8049f1c:u32
R_OF:bool =
  high:bool((T_t_112:u32 ^ 0x8049f1c:u32) & (T_t_112:u32 ^ R_EBX:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_EBX:u32 ^ T_t_112:u32 ^ 0x8049f1c:u32))
R_PF:bool =
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_SF:bool = high:bool(R_EBX:u32)
R_ZF:bool = 0:u32 == R_EBX:u32
addr 0x80483b0 @asm "sar    $0x2,%ebx"
label pc_0x80483b0
T_origDEST:u32 = R_EBX:u32
T_origCOUNT:u32 = 2:u32
R_EBX:u32 = R_EBX:u32 $>> 2:u32
R_CF:bool =
  if T_origCOUNT:u32 == 0:u32 then R_CF:bool else
  high:bool(T_origDEST:u32 << 0x20:u32 - T_origCOUNT:u32)
R_OF:bool =
  if T_origCOUNT:u32 == 0:u32 then R_OF:bool else
  if T_origCOUNT:u32 == 1:u32 then false else
  unknown "OF undefined after shift":bool
R_SF:bool =
  if T_origCOUNT:u32 == 0:u32 then R_SF:bool else high:bool(R_EBX:u32)
R_ZF:bool =
  if T_origCOUNT:u32 == 0:u32 then R_ZF:bool else 0:u32 == R_EBX:u32
R_PF:bool =
  if T_origCOUNT:u32 == 0:u32 then R_PF:bool else
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_AF:bool =
  if T_origCOUNT:u32 == 0:u32 then R_AF:bool else
  unknown "AF undefined after shift":bool
addr 0x80483b3 @asm "sub    $0x1,%ebx"
label pc_0x80483b3
T_t_115:u32 = R_EBX:u32
R_EBX:u32 = R_EBX:u32 - 1:u32
R_CF:bool = T_t_115:u32 < 1:u32
R_OF:bool = high:bool((T_t_115:u32 ^ 1:u32) & (T_t_115:u32 ^ R_EBX:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_EBX:u32 ^ T_t_115:u32 ^ 1:u32))
R_PF:bool =
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_SF:bool = high:bool(R_EBX:u32)
R_ZF:bool = 0:u32 == R_EBX:u32
addr 0x80483b6 @asm "cmp    %ebx,%eax"
label pc_0x80483b6
T_t_116:u32 = R_EAX:u32 - R_EBX:u32
R_CF:bool = R_EAX:u32 < R_EBX:u32
R_OF:bool = high:bool((R_EAX:u32 ^ R_EBX:u32) & (R_EAX:u32 ^ T_t_116:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (T_t_116:u32 ^ R_EAX:u32 ^ R_EBX:u32))
R_PF:bool =
  ~low:bool(T_t_116:u32 >> 7:u32 ^ T_t_116:u32 >> 6:u32 ^
            T_t_116:u32 >> 5:u32 ^ T_t_116:u32 >> 4:u32 ^
            T_t_116:u32 >> 3:u32 ^ T_t_116:u32 >> 2:u32 ^
            T_t_116:u32 >> 1:u32 ^ T_t_116:u32)
R_SF:bool = high:bool(T_t_116:u32)
R_ZF:bool = 0:u32 == T_t_116:u32
addr 0x80483b8 @asm "jae    0x00000000080483d8"
label pc_0x80483b8
cjmp ~R_CF:bool, 0x80483d8:u32, "nocjmp2"
label nocjmp2
addr 0x80483ba @asm "lea    0x0(%esi),%esi"
label pc_0x80483ba
R_ESI:u32 = R_ESI:u32 + 0:u32
addr 0x80483c0 @asm "add    $0x1,%eax"
label pc_0x80483c0
T_t1_117:u32 = R_EAX:u32
T_t2_118:u32 = 1:u32
R_EAX:u32 = R_EAX:u32 + T_t2_118:u32
R_CF:bool = R_EAX:u32 < T_t1_117:u32
R_OF:bool =
  high:bool((T_t1_117:u32 ^ ~T_t2_118:u32) & (T_t1_117:u32 ^ R_EAX:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_EAX:u32 ^ T_t1_117:u32 ^ T_t2_118:u32))
R_PF:bool =
  ~low:bool(R_EAX:u32 >> 7:u32 ^ R_EAX:u32 >> 6:u32 ^ R_EAX:u32 >> 5:u32 ^
            R_EAX:u32 >> 4:u32 ^ R_EAX:u32 >> 3:u32 ^ R_EAX:u32 >> 2:u32 ^
            R_EAX:u32 >> 1:u32 ^ R_EAX:u32)
R_SF:bool = high:bool(R_EAX:u32)
R_ZF:bool = 0:u32 == R_EAX:u32
addr 0x80483c3 @asm "mov    %eax,0x804a01c"
label pc_0x80483c3
mem:?u32 = mem:?u32 with [0x804a01c:u32, e_little]:u32 = R_EAX:u32
addr 0x80483c8 @asm "call   *0x8049f1c(,%eax,4)"
label pc_0x80483c8
T_target_119:u32 =
  mem:?u32[0x8049f1c:u32 + (R_EAX:u32 << 2:u32), e_little]:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80483cf:u32
jmp T_target_119:u32 @str "call"
addr 0x80483cf @asm "mov    0x804a01c,%eax"
label pc_0x80483cf
R_EAX:u32 = mem:?u32[0x804a01c:u32, e_little]:u32
addr 0x80483d4 @asm "cmp    %ebx,%eax"
label pc_0x80483d4
T_t_120:u32 = R_EAX:u32 - R_EBX:u32
R_CF:bool = R_EAX:u32 < R_EBX:u32
R_OF:bool = high:bool((R_EAX:u32 ^ R_EBX:u32) & (R_EAX:u32 ^ T_t_120:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (T_t_120:u32 ^ R_EAX:u32 ^ R_EBX:u32))
R_PF:bool =
  ~low:bool(T_t_120:u32 >> 7:u32 ^ T_t_120:u32 >> 6:u32 ^
            T_t_120:u32 >> 5:u32 ^ T_t_120:u32 >> 4:u32 ^
            T_t_120:u32 >> 3:u32 ^ T_t_120:u32 >> 2:u32 ^
            T_t_120:u32 >> 1:u32 ^ T_t_120:u32)
R_SF:bool = high:bool(T_t_120:u32)
R_ZF:bool = 0:u32 == T_t_120:u32
addr 0x80483d6 @asm "jb     0x00000000080483c0"
label pc_0x80483d6
cjmp R_CF:bool, 0x80483c0:u32, "nocjmp3"
label nocjmp3
addr 0x80483d8 @asm "movb   $0x1,0x804a018"
label pc_0x80483d8
mem:?u32 = mem:?u32 with [0x804a018:u32, e_little]:u8 = 1:u8
addr 0x80483df @asm "add    $0x4,%esp"
label pc_0x80483df
T_t1_121:u32 = R_ESP:u32
T_t2_122:u32 = 4:u32
R_ESP:u32 = R_ESP:u32 + T_t2_122:u32
R_CF:bool = R_ESP:u32 < T_t1_121:u32
R_OF:bool =
  high:bool((T_t1_121:u32 ^ ~T_t2_122:u32) & (T_t1_121:u32 ^ R_ESP:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t1_121:u32 ^ T_t2_122:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x80483e2 @asm "pop    %ebx"
label pc_0x80483e2
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80483e3 @asm "pop    %ebp"
label pc_0x80483e3
R_EBP:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80483e4 @asm "ret    "
label pc_0x80483e4
T_ra_123:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_123:u32 @str "ret"
addr 0x80483e5 @asm "lea    0x0(%esi,%eiz,1),%esi"
label pc_0x80483e5
R_ESI:u32 = R_ESI:u32 + 0:u32
addr 0x80483e9 @asm "lea    0x0(%edi,%eiz,1),%edi"
label pc_0x80483e9
R_EDI:u32 = R_EDI:u32 + 0:u32
addr 0x80483f0 @asm "push   %ebp"
label pc_0x80483f0
T_t_124:u32 = R_EBP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_124:u32
addr 0x80483f1 @asm "mov    %esp,%ebp"
label pc_0x80483f1
R_EBP:u32 = R_ESP:u32
addr 0x80483f3 @asm "sub    $0x18,%esp"
label pc_0x80483f3
T_t_125:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 0x18:u32
R_CF:bool = T_t_125:u32 < 0x18:u32
R_OF:bool = high:bool((T_t_125:u32 ^ 0x18:u32) & (T_t_125:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_125:u32 ^ 0x18:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x80483f6 @asm "mov    0x8049f24,%eax"
label pc_0x80483f6
R_EAX:u32 = mem:?u32[0x8049f24:u32, e_little]:u32
addr 0x80483fb @asm "test   %eax,%eax"
label pc_0x80483fb
T_t_126:u32 = R_EAX:u32 & R_EAX:u32
R_OF:bool = false
R_CF:bool = false
R_AF:bool = unknown "AF is undefined after and":bool
R_PF:bool =
  ~low:bool(T_t_126:u32 >> 7:u32 ^ T_t_126:u32 >> 6:u32 ^
            T_t_126:u32 >> 5:u32 ^ T_t_126:u32 >> 4:u32 ^
            T_t_126:u32 >> 3:u32 ^ T_t_126:u32 >> 2:u32 ^
            T_t_126:u32 >> 1:u32 ^ T_t_126:u32)
R_SF:bool = high:bool(T_t_126:u32)
R_ZF:bool = 0:u32 == T_t_126:u32
addr 0x80483fd @asm "je     0x0000000008048411"
label pc_0x80483fd
cjmp R_ZF:bool, 0x8048411:u32, "nocjmp4"
label nocjmp4
addr 0x80483ff @asm "mov    $0x0,%eax"
label pc_0x80483ff
R_EAX:u32 = 0:u32
addr 0x8048404 @asm "test   %eax,%eax"
label pc_0x8048404
T_t_127:u32 = R_EAX:u32 & R_EAX:u32
R_OF:bool = false
R_CF:bool = false
R_AF:bool = unknown "AF is undefined after and":bool
R_PF:bool =
  ~low:bool(T_t_127:u32 >> 7:u32 ^ T_t_127:u32 >> 6:u32 ^
            T_t_127:u32 >> 5:u32 ^ T_t_127:u32 >> 4:u32 ^
            T_t_127:u32 >> 3:u32 ^ T_t_127:u32 >> 2:u32 ^
            T_t_127:u32 >> 1:u32 ^ T_t_127:u32)
R_SF:bool = high:bool(T_t_127:u32)
R_ZF:bool = 0:u32 == T_t_127:u32
addr 0x8048406 @asm "je     0x0000000008048411"
label pc_0x8048406
cjmp R_ZF:bool, 0x8048411:u32, "nocjmp5"
label nocjmp5
addr 0x8048408 @asm "movl   $0x8049f24,(%esp)"
label pc_0x8048408
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8049f24:u32
addr 0x804840f @asm "call   *%eax"
label pc_0x804840f
T_target_128:u32 = R_EAX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048411:u32
jmp T_target_128:u32 @str "call"
addr 0x8048411 @asm "leave  "
label pc_0x8048411
R_ESP:u32 = R_EBP:u32
R_EBP:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048412 @asm "ret    "
label pc_0x8048412
T_ra_129:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_129:u32 @str "ret"
addr 0x8048413 @asm "nop"
label pc_0x8048413
addr 0x8048414 @asm "push   %ebp"
label pc_0x8048414
T_t_130:u32 = R_EBP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_130:u32
addr 0x8048415 @asm "mov    %esp,%ebp"
label pc_0x8048415
R_EBP:u32 = R_ESP:u32
addr 0x8048417 @asm "and    $0xfffffff0,%esp"
label pc_0x8048417
R_ESP:u32 = R_ESP:u32 & 0xfffffff0:u32
R_OF:bool = false
R_CF:bool = false
R_AF:bool = unknown "AF is undefined after and":bool
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x804841a @asm "sub    $0x20,%esp"
label pc_0x804841a
T_t_131:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 0x20:u32
R_CF:bool = T_t_131:u32 < 0x20:u32
R_OF:bool = high:bool((T_t_131:u32 ^ 0x20:u32) & (T_t_131:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_131:u32 ^ 0x20:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x804841d @asm "movl   $0x0,0x1c(%esp)"
label pc_0x804841d
mem:?u32 = mem:?u32 with [R_ESP:u32 + 0x1c:u32, e_little]:u32 = 0:u32
addr 0x8048425 @asm "jmp    0x0000000008048440"
label pc_0x8048425
jmp 0x8048440:u32
addr 0x8048427 @asm "mov    0x1c(%esp),%eax"
label pc_0x8048427
R_EAX:u32 = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32
addr 0x804842b @asm "mov    %eax,0x4(%esp)"
label pc_0x804842b
mem:?u32 = mem:?u32 with [R_ESP:u32 + 4:u32, e_little]:u32 = R_EAX:u32
addr 0x804842f @asm "movl   $0x8048560,(%esp)"
label pc_0x804842f
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048560:u32
addr 0x8048436 @asm "call   0x0000000008048320"
label pc_0x8048436
T_target_132:u32 = 0x8048320:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x804843b:u32
jmp 0x8048320:u32 @str "call"
addr 0x804843b @asm "addl   $0x1,0x1c(%esp)"
label pc_0x804843b
T_t1_133:u32 = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32
T_t2_134:u32 = 1:u32
mem:?u32 =
  mem:?u32 with [R_ESP:u32 + 0x1c:u32, e_little]:u32 =
  mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 + T_t2_134:u32
R_CF:bool = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 < T_t1_133:u32
R_OF:bool =
  high:bool((T_t1_133:u32 ^ ~T_t2_134:u32) &
            (T_t1_133:u32 ^ mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32))
R_AF:bool =
  0x10:u32 ==
  (0x10:u32 &
  (mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ T_t1_133:u32 ^
  T_t2_134:u32))
R_PF:bool =
  ~low:bool(mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 7:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 6:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 5:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 4:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 3:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 2:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 1:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32)
R_SF:bool = high:bool(mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32)
R_ZF:bool = 0:u32 == mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32
addr 0x8048440 @asm "cmpl   $0x2,0x1c(%esp)"
label pc_0x8048440
T_t_135:u32 = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 - 2:u32
R_CF:bool = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 < 2:u32
R_OF:bool =
  high:bool((mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ 2:u32) &
            (mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ T_t_135:u32))
R_AF:bool =
  0x10:u32 ==
  (0x10:u32 &
  (T_t_135:u32 ^ mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ 2:u32))
R_PF:bool =
  ~low:bool(T_t_135:u32 >> 7:u32 ^ T_t_135:u32 >> 6:u32 ^
            T_t_135:u32 >> 5:u32 ^ T_t_135:u32 >> 4:u32 ^
            T_t_135:u32 >> 3:u32 ^ T_t_135:u32 >> 2:u32 ^
            T_t_135:u32 >> 1:u32 ^ T_t_135:u32)
R_SF:bool = high:bool(T_t_135:u32)
R_ZF:bool = 0:u32 == T_t_135:u32
addr 0x8048445 @asm "jle    0x0000000008048427"
label pc_0x8048445
cjmp R_ZF:bool | R_SF:bool ^ R_OF:bool, 0x8048427:u32, "nocjmp6"
label nocjmp6
addr 0x8048447 @asm "cmpl   $0x1,0x8(%ebp)"
label pc_0x8048447
T_t_136:u32 = mem:?u32[R_EBP:u32 + 8:u32, e_little]:u32 - 1:u32
R_CF:bool = mem:?u32[R_EBP:u32 + 8:u32, e_little]:u32 < 1:u32
R_OF:bool =
  high:bool((mem:?u32[R_EBP:u32 + 8:u32, e_little]:u32 ^ 1:u32) &
            (mem:?u32[R_EBP:u32 + 8:u32, e_little]:u32 ^ T_t_136:u32))
R_AF:bool =
  0x10:u32 ==
  (0x10:u32 &
  (T_t_136:u32 ^ mem:?u32[R_EBP:u32 + 8:u32, e_little]:u32 ^ 1:u32))
R_PF:bool =
  ~low:bool(T_t_136:u32 >> 7:u32 ^ T_t_136:u32 >> 6:u32 ^
            T_t_136:u32 >> 5:u32 ^ T_t_136:u32 >> 4:u32 ^
            T_t_136:u32 >> 3:u32 ^ T_t_136:u32 >> 2:u32 ^
            T_t_136:u32 >> 1:u32 ^ T_t_136:u32)
R_SF:bool = high:bool(T_t_136:u32)
R_ZF:bool = 0:u32 == T_t_136:u32
addr 0x804844b @asm "jle    0x0000000008048459"
label pc_0x804844b
cjmp R_ZF:bool | R_SF:bool ^ R_OF:bool, 0x8048459:u32, "nocjmp7"
label nocjmp7
addr 0x804844d @asm "movl   $0x8048563,(%esp)"
label pc_0x804844d
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048563:u32
addr 0x8048454 @asm "call   0x0000000008048330"
label pc_0x8048454
T_target_137:u32 = 0x8048330:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048459:u32
jmp 0x8048330:u32 @str "call"
addr 0x8048459 @asm "movl   $0x0,0x1c(%esp)"
label pc_0x8048459
mem:?u32 = mem:?u32 with [R_ESP:u32 + 0x1c:u32, e_little]:u32 = 0:u32
addr 0x8048461 @asm "jmp    0x000000000804847c"
label pc_0x8048461
jmp 0x804847c:u32
addr 0x8048463 @asm "mov    0x1c(%esp),%eax"
label pc_0x8048463
R_EAX:u32 = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32
addr 0x8048467 @asm "mov    %eax,0x4(%esp)"
label pc_0x8048467
mem:?u32 = mem:?u32 with [R_ESP:u32 + 4:u32, e_little]:u32 = R_EAX:u32
addr 0x804846b @asm "movl   $0x8048560,(%esp)"
label pc_0x804846b
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048560:u32
addr 0x8048472 @asm "call   0x0000000008048320"
label pc_0x8048472
T_target_138:u32 = 0x8048320:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048477:u32
jmp 0x8048320:u32 @str "call"
addr 0x8048477 @asm "addl   $0x1,0x1c(%esp)"
label pc_0x8048477
T_t1_139:u32 = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32
T_t2_140:u32 = 1:u32
mem:?u32 =
  mem:?u32 with [R_ESP:u32 + 0x1c:u32, e_little]:u32 =
  mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 + T_t2_140:u32
R_CF:bool = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 < T_t1_139:u32
R_OF:bool =
  high:bool((T_t1_139:u32 ^ ~T_t2_140:u32) &
            (T_t1_139:u32 ^ mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32))
R_AF:bool =
  0x10:u32 ==
  (0x10:u32 &
  (mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ T_t1_139:u32 ^
  T_t2_140:u32))
R_PF:bool =
  ~low:bool(mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 7:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 6:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 5:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 4:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 3:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 2:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 >> 1:u32 ^
            mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32)
R_SF:bool = high:bool(mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32)
R_ZF:bool = 0:u32 == mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32
addr 0x804847c @asm "cmpl   $0x4,0x1c(%esp)"
label pc_0x804847c
T_t_141:u32 = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 - 4:u32
R_CF:bool = mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 < 4:u32
R_OF:bool =
  high:bool((mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ 4:u32) &
            (mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ T_t_141:u32))
R_AF:bool =
  0x10:u32 ==
  (0x10:u32 &
  (T_t_141:u32 ^ mem:?u32[R_ESP:u32 + 0x1c:u32, e_little]:u32 ^ 4:u32))
R_PF:bool =
  ~low:bool(T_t_141:u32 >> 7:u32 ^ T_t_141:u32 >> 6:u32 ^
            T_t_141:u32 >> 5:u32 ^ T_t_141:u32 >> 4:u32 ^
            T_t_141:u32 >> 3:u32 ^ T_t_141:u32 >> 2:u32 ^
            T_t_141:u32 >> 1:u32 ^ T_t_141:u32)
R_SF:bool = high:bool(T_t_141:u32)
R_ZF:bool = 0:u32 == T_t_141:u32
addr 0x8048481 @asm "jle    0x0000000008048463"
label pc_0x8048481
cjmp R_ZF:bool | R_SF:bool ^ R_OF:bool, 0x8048463:u32, "nocjmp8"
label nocjmp8
addr 0x8048483 @asm "mov    $0x0,%eax"
label pc_0x8048483
R_EAX:u32 = 0:u32
addr 0x8048488 @asm "leave  "
label pc_0x8048488
R_ESP:u32 = R_EBP:u32
R_EBP:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048489 @asm "ret    "
label pc_0x8048489
T_ra_142:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_142:u32 @str "ret"
addr 0x804848a @asm "nop"
label pc_0x804848a
addr 0x804848b @asm "nop"
label pc_0x804848b
addr 0x804848c @asm "nop"
label pc_0x804848c
addr 0x804848d @asm "nop"
label pc_0x804848d
addr 0x804848e @asm "nop"
label pc_0x804848e
addr 0x804848f @asm "nop"
label pc_0x804848f
addr 0x8048490 @asm "push   %ebp"
label pc_0x8048490
T_t_143:u32 = R_EBP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_143:u32
addr 0x8048491 @asm "push   %edi"
label pc_0x8048491
T_t_144:u32 = R_EDI:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_144:u32
addr 0x8048492 @asm "push   %esi"
label pc_0x8048492
T_t_145:u32 = R_ESI:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_145:u32
addr 0x8048493 @asm "push   %ebx"
label pc_0x8048493
T_t_146:u32 = R_EBX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_146:u32
addr 0x8048494 @asm "call   0x0000000008048502"
label pc_0x8048494
T_target_147:u32 = 0x8048502:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048499:u32
jmp 0x8048502:u32 @str "call"
addr 0x8048499 @asm "add    $0x1b5b,%ebx"
label pc_0x8048499
T_t1_148:u32 = R_EBX:u32
T_t2_149:u32 = 0x1b5b:u32
R_EBX:u32 = R_EBX:u32 + T_t2_149:u32
R_CF:bool = R_EBX:u32 < T_t1_148:u32
R_OF:bool =
  high:bool((T_t1_148:u32 ^ ~T_t2_149:u32) & (T_t1_148:u32 ^ R_EBX:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_EBX:u32 ^ T_t1_148:u32 ^ T_t2_149:u32))
R_PF:bool =
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_SF:bool = high:bool(R_EBX:u32)
R_ZF:bool = 0:u32 == R_EBX:u32
addr 0x804849f @asm "sub    $0x1c,%esp"
label pc_0x804849f
T_t_150:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 0x1c:u32
R_CF:bool = T_t_150:u32 < 0x1c:u32
R_OF:bool = high:bool((T_t_150:u32 ^ 0x1c:u32) & (T_t_150:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_150:u32 ^ 0x1c:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x80484a2 @asm "mov    0x30(%esp),%ebp"
label pc_0x80484a2
R_EBP:u32 = mem:?u32[R_ESP:u32 + 0x30:u32, e_little]:u32
addr 0x80484a6 @asm "lea    -0xe0(%ebx),%edi"
label pc_0x80484a6
R_EDI:u32 = R_EBX:u32 + 0xffffff20:u32
addr 0x80484ac @asm "call   0x00000000080482d4"
label pc_0x80484ac
T_target_151:u32 = 0x80482d4:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80484b1:u32
jmp 0x80482d4:u32 @str "call"
addr 0x80484b1 @asm "lea    -0xe0(%ebx),%eax"
label pc_0x80484b1
R_EAX:u32 = R_EBX:u32 + 0xffffff20:u32
addr 0x80484b7 @asm "sub    %eax,%edi"
label pc_0x80484b7
T_t_152:u32 = R_EDI:u32
R_EDI:u32 = R_EDI:u32 - R_EAX:u32
R_CF:bool = T_t_152:u32 < R_EAX:u32
R_OF:bool = high:bool((T_t_152:u32 ^ R_EAX:u32) & (T_t_152:u32 ^ R_EDI:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_EDI:u32 ^ T_t_152:u32 ^ R_EAX:u32))
R_PF:bool =
  ~low:bool(R_EDI:u32 >> 7:u32 ^ R_EDI:u32 >> 6:u32 ^ R_EDI:u32 >> 5:u32 ^
            R_EDI:u32 >> 4:u32 ^ R_EDI:u32 >> 3:u32 ^ R_EDI:u32 >> 2:u32 ^
            R_EDI:u32 >> 1:u32 ^ R_EDI:u32)
R_SF:bool = high:bool(R_EDI:u32)
R_ZF:bool = 0:u32 == R_EDI:u32
addr 0x80484b9 @asm "sar    $0x2,%edi"
label pc_0x80484b9
T_origDEST_153:u32 = R_EDI:u32
T_origCOUNT_154:u32 = 2:u32
R_EDI:u32 = R_EDI:u32 $>> 2:u32
R_CF:bool =
  if T_origCOUNT_154:u32 == 0:u32 then R_CF:bool else
  high:bool(T_origDEST_153:u32 << 0x20:u32 - T_origCOUNT_154:u32)
R_OF:bool =
  if T_origCOUNT_154:u32 == 0:u32 then R_OF:bool else
  if T_origCOUNT_154:u32 == 1:u32 then false else
  unknown "OF undefined after shift":bool
R_SF:bool =
  if T_origCOUNT_154:u32 == 0:u32 then R_SF:bool else high:bool(R_EDI:u32)
R_ZF:bool =
  if T_origCOUNT_154:u32 == 0:u32 then R_ZF:bool else 0:u32 == R_EDI:u32
R_PF:bool =
  if T_origCOUNT_154:u32 == 0:u32 then R_PF:bool else
  ~low:bool(R_EDI:u32 >> 7:u32 ^ R_EDI:u32 >> 6:u32 ^ R_EDI:u32 >> 5:u32 ^
            R_EDI:u32 >> 4:u32 ^ R_EDI:u32 >> 3:u32 ^ R_EDI:u32 >> 2:u32 ^
            R_EDI:u32 >> 1:u32 ^ R_EDI:u32)
R_AF:bool =
  if T_origCOUNT_154:u32 == 0:u32 then R_AF:bool else
  unknown "AF undefined after shift":bool
addr 0x80484bc @asm "test   %edi,%edi"
label pc_0x80484bc
T_t_155:u32 = R_EDI:u32 & R_EDI:u32
R_OF:bool = false
R_CF:bool = false
R_AF:bool = unknown "AF is undefined after and":bool
R_PF:bool =
  ~low:bool(T_t_155:u32 >> 7:u32 ^ T_t_155:u32 >> 6:u32 ^
            T_t_155:u32 >> 5:u32 ^ T_t_155:u32 >> 4:u32 ^
            T_t_155:u32 >> 3:u32 ^ T_t_155:u32 >> 2:u32 ^
            T_t_155:u32 >> 1:u32 ^ T_t_155:u32)
R_SF:bool = high:bool(T_t_155:u32)
R_ZF:bool = 0:u32 == T_t_155:u32
addr 0x80484be @asm "je     0x00000000080484e9"
label pc_0x80484be
cjmp R_ZF:bool, 0x80484e9:u32, "nocjmp9"
label nocjmp9
addr 0x80484c0 @asm "xor    %esi,%esi"
label pc_0x80484c0
R_ESI:u32 = 0:u32
R_AF:bool = unknown "AF is undefined after xor":bool
R_ZF:bool = true
R_PF:bool = true
R_OF:bool = false
R_CF:bool = false
R_SF:bool = false
addr 0x80484c2 @asm "lea    0x0(%esi),%esi"
label pc_0x80484c2
R_ESI:u32 = R_ESI:u32 + 0:u32
addr 0x80484c8 @asm "mov    0x38(%esp),%eax"
label pc_0x80484c8
R_EAX:u32 = mem:?u32[R_ESP:u32 + 0x38:u32, e_little]:u32
addr 0x80484cc @asm "mov    %ebp,(%esp)"
label pc_0x80484cc
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = R_EBP:u32
addr 0x80484cf @asm "mov    %eax,0x8(%esp)"
label pc_0x80484cf
mem:?u32 = mem:?u32 with [R_ESP:u32 + 8:u32, e_little]:u32 = R_EAX:u32
addr 0x80484d3 @asm "mov    0x34(%esp),%eax"
label pc_0x80484d3
R_EAX:u32 = mem:?u32[R_ESP:u32 + 0x34:u32, e_little]:u32
addr 0x80484d7 @asm "mov    %eax,0x4(%esp)"
label pc_0x80484d7
mem:?u32 = mem:?u32 with [R_ESP:u32 + 4:u32, e_little]:u32 = R_EAX:u32
addr 0x80484db @asm "call   *-0xe0(%ebx,%esi,4)"
label pc_0x80484db
T_target_156:u32 =
  mem:?u32[R_EBX:u32 + (R_ESI:u32 << 2:u32) + 0xffffff20:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x80484e2:u32
jmp T_target_156:u32 @str "call"
addr 0x80484e2 @asm "add    $0x1,%esi"
label pc_0x80484e2
T_t1_157:u32 = R_ESI:u32
T_t2_158:u32 = 1:u32
R_ESI:u32 = R_ESI:u32 + T_t2_158:u32
R_CF:bool = R_ESI:u32 < T_t1_157:u32
R_OF:bool =
  high:bool((T_t1_157:u32 ^ ~T_t2_158:u32) & (T_t1_157:u32 ^ R_ESI:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_ESI:u32 ^ T_t1_157:u32 ^ T_t2_158:u32))
R_PF:bool =
  ~low:bool(R_ESI:u32 >> 7:u32 ^ R_ESI:u32 >> 6:u32 ^ R_ESI:u32 >> 5:u32 ^
            R_ESI:u32 >> 4:u32 ^ R_ESI:u32 >> 3:u32 ^ R_ESI:u32 >> 2:u32 ^
            R_ESI:u32 >> 1:u32 ^ R_ESI:u32)
R_SF:bool = high:bool(R_ESI:u32)
R_ZF:bool = 0:u32 == R_ESI:u32
addr 0x80484e5 @asm "cmp    %edi,%esi"
label pc_0x80484e5
T_t_159:u32 = R_ESI:u32 - R_EDI:u32
R_CF:bool = R_ESI:u32 < R_EDI:u32
R_OF:bool = high:bool((R_ESI:u32 ^ R_EDI:u32) & (R_ESI:u32 ^ T_t_159:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (T_t_159:u32 ^ R_ESI:u32 ^ R_EDI:u32))
R_PF:bool =
  ~low:bool(T_t_159:u32 >> 7:u32 ^ T_t_159:u32 >> 6:u32 ^
            T_t_159:u32 >> 5:u32 ^ T_t_159:u32 >> 4:u32 ^
            T_t_159:u32 >> 3:u32 ^ T_t_159:u32 >> 2:u32 ^
            T_t_159:u32 >> 1:u32 ^ T_t_159:u32)
R_SF:bool = high:bool(T_t_159:u32)
R_ZF:bool = 0:u32 == T_t_159:u32
addr 0x80484e7 @asm "jne    0x00000000080484c8"
label pc_0x80484e7
cjmp ~R_ZF:bool, 0x80484c8:u32, "nocjmp10"
label nocjmp10
addr 0x80484e9 @asm "add    $0x1c,%esp"
label pc_0x80484e9
T_t1_160:u32 = R_ESP:u32
T_t2_161:u32 = 0x1c:u32
R_ESP:u32 = R_ESP:u32 + T_t2_161:u32
R_CF:bool = R_ESP:u32 < T_t1_160:u32
R_OF:bool =
  high:bool((T_t1_160:u32 ^ ~T_t2_161:u32) & (T_t1_160:u32 ^ R_ESP:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t1_160:u32 ^ T_t2_161:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x80484ec @asm "pop    %ebx"
label pc_0x80484ec
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80484ed @asm "pop    %esi"
label pc_0x80484ed
R_ESI:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80484ee @asm "pop    %edi"
label pc_0x80484ee
R_EDI:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80484ef @asm "pop    %ebp"
label pc_0x80484ef
R_EBP:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x80484f0 @asm "ret    "
label pc_0x80484f0
T_ra_162:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_162:u32 @str "ret"
addr 0x80484f1 @asm "jmp    0x0000000008048500"
label pc_0x80484f1
jmp 0x8048500:u32
addr 0x80484f3 @asm "nop"
label pc_0x80484f3
addr 0x80484f4 @asm "nop"
label pc_0x80484f4
addr 0x80484f5 @asm "nop"
label pc_0x80484f5
addr 0x80484f6 @asm "nop"
label pc_0x80484f6
addr 0x80484f7 @asm "nop"
label pc_0x80484f7
addr 0x80484f8 @asm "nop"
label pc_0x80484f8
addr 0x80484f9 @asm "nop"
label pc_0x80484f9
addr 0x80484fa @asm "nop"
label pc_0x80484fa
addr 0x80484fb @asm "nop"
label pc_0x80484fb
addr 0x80484fc @asm "nop"
label pc_0x80484fc
addr 0x80484fd @asm "nop"
label pc_0x80484fd
addr 0x80484fe @asm "nop"
label pc_0x80484fe
addr 0x80484ff @asm "nop"
label pc_0x80484ff
addr 0x8048500 @asm "repz ret "
label pc_0x8048500
T_ra_163:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_163:u32 @str "ret"
addr 0x8048502 @asm "mov    (%esp),%ebx"
label pc_0x8048502
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
addr 0x8048505 @asm "ret    "
label pc_0x8048505
T_ra_164:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_164:u32 @str "ret"
addr 0x8048506 @asm "nop"
label pc_0x8048506
addr 0x8048507 @asm "nop"
label pc_0x8048507
addr 0x8048508 @asm "nop"
label pc_0x8048508
addr 0x8048509 @asm "nop"
label pc_0x8048509
addr 0x804850a @asm "nop"
label pc_0x804850a
addr 0x804850b @asm "nop"
label pc_0x804850b
addr 0x804850c @asm "nop"
label pc_0x804850c
addr 0x804850d @asm "nop"
label pc_0x804850d
addr 0x804850e @asm "nop"
label pc_0x804850e
addr 0x804850f @asm "nop"
label pc_0x804850f
addr 0x8048510 @asm "push   %ebp"
label pc_0x8048510
T_t_165:u32 = R_EBP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_165:u32
addr 0x8048511 @asm "mov    %esp,%ebp"
label pc_0x8048511
R_EBP:u32 = R_ESP:u32
addr 0x8048513 @asm "push   %ebx"
label pc_0x8048513
T_t_166:u32 = R_EBX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_166:u32
addr 0x8048514 @asm "sub    $0x4,%esp"
label pc_0x8048514
T_t_167:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
R_CF:bool = T_t_167:u32 < 4:u32
R_OF:bool = high:bool((T_t_167:u32 ^ 4:u32) & (T_t_167:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_167:u32 ^ 4:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048517 @asm "mov    0x8049f14,%eax"
label pc_0x8048517
R_EAX:u32 = mem:?u32[0x8049f14:u32, e_little]:u32
addr 0x804851c @asm "cmp    $0xffffffff,%eax"
label pc_0x804851c
T_t_168:u32 = R_EAX:u32 - -1:u32
R_CF:bool = R_EAX:u32 < -1:u32
R_OF:bool = high:bool((R_EAX:u32 ^ -1:u32) & (R_EAX:u32 ^ T_t_168:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (T_t_168:u32 ^ R_EAX:u32 ^ -1:u32))
R_PF:bool =
  ~low:bool(T_t_168:u32 >> 7:u32 ^ T_t_168:u32 >> 6:u32 ^
            T_t_168:u32 >> 5:u32 ^ T_t_168:u32 >> 4:u32 ^
            T_t_168:u32 >> 3:u32 ^ T_t_168:u32 >> 2:u32 ^
            T_t_168:u32 >> 1:u32 ^ T_t_168:u32)
R_SF:bool = high:bool(T_t_168:u32)
R_ZF:bool = 0:u32 == T_t_168:u32
addr 0x804851f @asm "je     0x0000000008048534"
label pc_0x804851f
cjmp R_ZF:bool, 0x8048534:u32, "nocjmp11"
label nocjmp11
addr 0x8048521 @asm "mov    $0x8049f14,%ebx"
label pc_0x8048521
R_EBX:u32 = 0x8049f14:u32
addr 0x8048526 @asm "xchg   %ax,%ax"
label pc_0x8048526
addr 0x8048528 @asm "sub    $0x4,%ebx"
label pc_0x8048528
T_t_169:u32 = R_EBX:u32
R_EBX:u32 = R_EBX:u32 - 4:u32
R_CF:bool = T_t_169:u32 < 4:u32
R_OF:bool = high:bool((T_t_169:u32 ^ 4:u32) & (T_t_169:u32 ^ R_EBX:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_EBX:u32 ^ T_t_169:u32 ^ 4:u32))
R_PF:bool =
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_SF:bool = high:bool(R_EBX:u32)
R_ZF:bool = 0:u32 == R_EBX:u32
addr 0x804852b @asm "call   *%eax"
label pc_0x804852b
T_target_170:u32 = R_EAX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x804852d:u32
jmp T_target_170:u32 @str "call"
addr 0x804852d @asm "mov    (%ebx),%eax"
label pc_0x804852d
R_EAX:u32 = mem:?u32[R_EBX:u32, e_little]:u32
addr 0x804852f @asm "cmp    $0xffffffff,%eax"
label pc_0x804852f
T_t_171:u32 = R_EAX:u32 - -1:u32
R_CF:bool = R_EAX:u32 < -1:u32
R_OF:bool = high:bool((R_EAX:u32 ^ -1:u32) & (R_EAX:u32 ^ T_t_171:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (T_t_171:u32 ^ R_EAX:u32 ^ -1:u32))
R_PF:bool =
  ~low:bool(T_t_171:u32 >> 7:u32 ^ T_t_171:u32 >> 6:u32 ^
            T_t_171:u32 >> 5:u32 ^ T_t_171:u32 >> 4:u32 ^
            T_t_171:u32 >> 3:u32 ^ T_t_171:u32 >> 2:u32 ^
            T_t_171:u32 >> 1:u32 ^ T_t_171:u32)
R_SF:bool = high:bool(T_t_171:u32)
R_ZF:bool = 0:u32 == T_t_171:u32
addr 0x8048532 @asm "jne    0x0000000008048528"
label pc_0x8048532
cjmp ~R_ZF:bool, 0x8048528:u32, "nocjmp12"
label nocjmp12
addr 0x8048534 @asm "add    $0x4,%esp"
label pc_0x8048534
T_t1_172:u32 = R_ESP:u32
T_t2_173:u32 = 4:u32
R_ESP:u32 = R_ESP:u32 + T_t2_173:u32
R_CF:bool = R_ESP:u32 < T_t1_172:u32
R_OF:bool =
  high:bool((T_t1_172:u32 ^ ~T_t2_173:u32) & (T_t1_172:u32 ^ R_ESP:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t1_172:u32 ^ T_t2_173:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048537 @asm "pop    %ebx"
label pc_0x8048537
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048538 @asm "pop    %ebp"
label pc_0x8048538
R_EBP:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048539 @asm "ret    "
label pc_0x8048539
T_ra_174:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_174:u32 @str "ret"
addr 0x804853a @asm "nop"
label pc_0x804853a
addr 0x804853b @asm "nop"
label pc_0x804853b
addr 0x804853c @asm "push   %ebx"
label pc_0x804853c
T_t_175:u32 = R_EBX:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = T_t_175:u32
addr 0x804853d @asm "sub    $0x8,%esp"
label pc_0x804853d
T_t_176:u32 = R_ESP:u32
R_ESP:u32 = R_ESP:u32 - 8:u32
R_CF:bool = T_t_176:u32 < 8:u32
R_OF:bool = high:bool((T_t_176:u32 ^ 8:u32) & (T_t_176:u32 ^ R_ESP:u32))
R_AF:bool = 0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t_176:u32 ^ 8:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048540 @asm "call   0x0000000008048545"
label pc_0x8048540
T_target_177:u32 = 0x8048545:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048545:u32
jmp 0x8048545:u32 @str "call"
addr 0x8048545 @asm "pop    %ebx"
label pc_0x8048545
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048546 @asm "add    $0x1aaf,%ebx"
label pc_0x8048546
T_t1_178:u32 = R_EBX:u32
T_t2_179:u32 = 0x1aaf:u32
R_EBX:u32 = R_EBX:u32 + T_t2_179:u32
R_CF:bool = R_EBX:u32 < T_t1_178:u32
R_OF:bool =
  high:bool((T_t1_178:u32 ^ ~T_t2_179:u32) & (T_t1_178:u32 ^ R_EBX:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_EBX:u32 ^ T_t1_178:u32 ^ T_t2_179:u32))
R_PF:bool =
  ~low:bool(R_EBX:u32 >> 7:u32 ^ R_EBX:u32 >> 6:u32 ^ R_EBX:u32 >> 5:u32 ^
            R_EBX:u32 >> 4:u32 ^ R_EBX:u32 >> 3:u32 ^ R_EBX:u32 >> 2:u32 ^
            R_EBX:u32 >> 1:u32 ^ R_EBX:u32)
R_SF:bool = high:bool(R_EBX:u32)
R_ZF:bool = 0:u32 == R_EBX:u32
addr 0x804854c @asm "call   0x0000000008048390"
label pc_0x804854c
T_target_180:u32 = 0x8048390:u32
R_ESP:u32 = R_ESP:u32 - 4:u32
mem:?u32 = mem:?u32 with [R_ESP:u32, e_little]:u32 = 0x8048551:u32
jmp 0x8048390:u32 @str "call"
addr 0x8048551 @asm "add    $0x8,%esp"
label pc_0x8048551
T_t1_181:u32 = R_ESP:u32
T_t2_182:u32 = 8:u32
R_ESP:u32 = R_ESP:u32 + T_t2_182:u32
R_CF:bool = R_ESP:u32 < T_t1_181:u32
R_OF:bool =
  high:bool((T_t1_181:u32 ^ ~T_t2_182:u32) & (T_t1_181:u32 ^ R_ESP:u32))
R_AF:bool =
  0x10:u32 == (0x10:u32 & (R_ESP:u32 ^ T_t1_181:u32 ^ T_t2_182:u32))
R_PF:bool =
  ~low:bool(R_ESP:u32 >> 7:u32 ^ R_ESP:u32 >> 6:u32 ^ R_ESP:u32 >> 5:u32 ^
            R_ESP:u32 >> 4:u32 ^ R_ESP:u32 >> 3:u32 ^ R_ESP:u32 >> 2:u32 ^
            R_ESP:u32 >> 1:u32 ^ R_ESP:u32)
R_SF:bool = high:bool(R_ESP:u32)
R_ZF:bool = 0:u32 == R_ESP:u32
addr 0x8048554 @asm "pop    %ebx"
label pc_0x8048554
R_EBX:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
addr 0x8048555 @asm "ret    "
label pc_0x8048555
T_ra_183:u32 = mem:?u32[R_ESP:u32, e_little]:u32
R_ESP:u32 = R_ESP:u32 + 4:u32
jmp T_ra_183:u32 @str "ret"


